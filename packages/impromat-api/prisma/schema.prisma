datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "postgresqlExtensions"]
}

model Element {
  id        String   @id @default(uuid())
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  version   Int      @default(0)
  deleted   Boolean  @default(false)

  name               String
  markdown           String?
  summary            String?
  languageCode       String?
  sourceUrl          String?
  sourceName         String
  sourceBaseUrl      String?
  licenseName        String?
  licenseUrl         String?
  visibility         ElementVisibility @default(PRIVATE)
  improbibIdentifier String?           @unique

  ownerId String?

  owner               User?                 @relation(fields: [ownerId], references: [id])
  userFavoriteElement UserFavoriteElement[]
  workshopElements    WorkshopElement[]

  snapshotUser     User?     @relation("SnapshotUser", fields: [snapshotUserId], references: [id])
  snapshotUserId   String?
  snapshotParent   Element?  @relation("SnapshotRelation", fields: [snapshotParentId], references: [id])
  snapshots        Element[] @relation("SnapshotRelation")
  snapshotParentId String?

  // 1536 for OpenAI, 1024 for mistral
  embedding Unsupported("vector(4096)")?

  metadata ElementMetadata[]
  tags     ElementToElementTag[]
}

model ElementMetadata {
  id        String   @id @default(uuid())
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  elementId String
  name      String
  value     Json

  element Element @relation(fields: [elementId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum ElementVisibility {
  PRIVATE
  PUBLIC
}

model ElementToElementTag {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  version   Int      @default(0)

  elementId String
  tagId     String

  element Element    @relation(fields: [elementId], references: [id])
  tag     ElementTag @relation(fields: [tagId], references: [id])

  @@id([elementId, tagId])
}

model ElementTag {
  id        String   @id @default(uuid())
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  version   Int      @default(0)

  name     String                @unique
  elements ElementToElementTag[]
}

model UserFavoriteElement {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  version   Int      @default(0)

  userId    String
  elementId String

  element Element @relation(fields: [elementId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@id([userId, elementId])
}

model UserLikedWorkshop {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  version   Int      @default(0)

  userId     String
  workshopId String

  workshop Workshop @relation(fields: [workshopId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@id([userId, workshopId])
}

model User {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  version   Int       @default(0)
  deleted   Boolean   @default(false)
  deletedAt DateTime?

  name                 String?  @unique
  languageCodes        String[]
  googleSubscriptionId String?  @unique
  accessToken          String?

  favoriteElements UserFavoriteElement[]
  likedWorkshops   UserLikedWorkshop[]
  workshops        Workshop[]
  elements         Element[]

  elementSnapshots Element[] @relation("SnapshotUser")
}

model Workshop {
  id        String   @id @default(uuid())
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  version   Int      @default(0)
  deleted   Boolean  @default(false)

  name           String
  description    String?
  isPublic       Boolean   @default(false)
  isListed       Boolean   @default(false)
  dateOfWorkshop DateTime?

  ownerId String

  sections           WorkshopSection[]
  owner              User                @relation(fields: [ownerId], references: [id])
  userLikedWorkshops UserLikedWorkshop[]
}

model WorkshopSection {
  id        String    @id @default(uuid())
  updatedAt DateTime  @updatedAt
  createdAt DateTime  @default(now())
  version   Int       @default(0)
  deleted   Boolean   @default(false)
  deletedAt DateTime?

  name        String?
  color       String?
  isCollapsed Boolean @default(false)
  orderIndex  Float   @default(-1)

  workshopId String

  elements WorkshopElement[]
  workshop Workshop          @relation(fields: [workshopId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model WorkshopElement {
  id        String    @id @default(uuid())
  updatedAt DateTime  @updatedAt
  createdAt DateTime  @default(now())
  version   Int       @default(0)
  deleted   Boolean   @default(false)
  deletedAt DateTime?

  note       String?
  color      String?
  orderIndex Int     @default(-1)

  basedOnId         String
  workshopSectionId String

  basedOn         Element         @relation(fields: [basedOnId], references: [id])
  workshopSection WorkshopSection @relation(fields: [workshopSectionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
