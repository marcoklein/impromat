# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ElementTag {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  version: Int!
  deleted: Boolean!
  name: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type WorkshopElement {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  version: Int!
  deleted: Boolean!
  note: String
  basedOn: Element!
  section: WorkshopSection
}

type WorkshopSection {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  version: Int!
  deleted: Boolean!
  name: String
  color: String
  isCollapsed: Boolean!
  elements: [WorkshopElement!]!
  workshop: Workshop!
  orderIndex: Float!
}

type Workshop {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  version: Int!
  deleted: Boolean!
  name: String!
  description: String
  sections: [WorkshopSection!]!
  owner: User!
}

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  version: Int!
  deleted: Boolean!
  workshops: [Workshop!]!

  """Elements owned by this user."""
  elements: [Element!]!
  favoriteElements: [Element!]!
}

type Element {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  version: Int!
  deleted: Boolean!
  name: String!
  markdown: String
  tags: [ElementTag!]!
  usedBy: [WorkshopElement!]!
  languageCode: String
  sourceUrl: String
  sourceName: String
  sourceBaseUrl: String
  licenseName: String
  licenseUrl: String
  owner: User
}

type Query {
  googleAuthUrl: String!
  searchElements(input: SearchElementsInput!): [Element!]!
  workshop(id: ID!): Workshop!
  workshops: [Workshop!]!
  workshopElement(id: ID!): WorkshopElement!
  element(id: ID!): Element!
  elements: [Element!]!

  """Get information about the current user."""
  me: User!
}

input SearchElementsInput {
  text: String!
}

type Mutation {
  logout: Boolean!
  createWorkshop(input: CreateWorkshopInput!): Workshop!
  updateWorkshop(input: UpdateWorkshopInput!): Workshop!
  deleteWorkshop(id: ID!): Workshop
  createElement(input: CreateElementInput!): Element!
  updateElement(input: UpdateElementInput!): Element!
}

input CreateWorkshopInput {
  name: String!
  description: String
  sections: WorkshopSectionListCreateInput
}

input WorkshopSectionListCreateInput {
  create: [CreateWorkshopSectionInput!]
}

input CreateWorkshopSectionInput {
  name: String!
  orderIndex: Float
  isCollapsed: Boolean
}

input UpdateWorkshopInput {
  name: String
  description: String
  sections: WorkshopSectionListInput
  id: ID!
}

input WorkshopSectionListInput {
  create: [CreateWorkshopSectionInput!]
  update: [UpdateWorkshopSectionInput!]
  delete: [DeleteWorkshopSectionInput!]
}

input UpdateWorkshopSectionInput {
  name: String
  orderIndex: Float
  isCollapsed: Boolean
  id: ID!
  elements: WorkshopElementListInput
}

input WorkshopElementListInput {
  create: [CreateWorkshopElementInput!]
  update: [UpdateWorkshopElementInput!]
  delete: [DeleteWorkshopElementInput!]
}

input CreateWorkshopElementInput {
  note: String
  basedOn: BasedOnElementConnectInput!
  orderIndex: Float
}

input BasedOnElementConnectInput {
  connect: IdInput!
}

input IdInput {
  id: ID!
}

input UpdateWorkshopElementInput {
  note: String
  basedOn: BasedOnElementConnectInput
  orderIndex: Float
  id: ID!
}

input DeleteWorkshopElementInput {
  id: ID!
}

input DeleteWorkshopSectionInput {
  id: ID!
}

input CreateElementInput {
  name: String!
  markdown: String
  orderIndex: Int
}

input UpdateElementInput {
  name: String
  markdown: String
  orderIndex: Int
  id: ID!
}